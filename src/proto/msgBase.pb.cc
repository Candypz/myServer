// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgBase_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msgBase_2eproto() {
  protobuf_AddDesc_msgBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgBase.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHeader_descriptor_ = file->message_type(0);
  static const int MsgHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, userid_),
  };
  MsgHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgHeader_descriptor_,
      MsgHeader::default_instance_,
      MsgHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _is_default_instance_));
  ClientPacket_descriptor_ = file->message_type(1);
  static const int ClientPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPacket, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPacket, content_),
  };
  ClientPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientPacket_descriptor_,
      ClientPacket::default_instance_,
      ClientPacket_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPacket, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPacket, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgHeader_descriptor_, &MsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientPacket_descriptor_, &ClientPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgBase_2eproto() {
  delete MsgHeader::default_instance_;
  delete MsgHeader_reflection_;
  delete ClientPacket::default_instance_;
  delete ClientPacket_reflection_;
}

void protobuf_AddDesc_msgBase_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msgBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsgBase.proto\")\n\tMsgHeader\022\014\n\004time\030\003 \001"
    "(\003\022\016\n\006userid\030\004 \001(\003\";\n\014ClientPacket\022\032\n\006he"
    "ader\030\001 \001(\0132\n.MsgHeader\022\017\n\007content\030\002 \001(\014b"
    "\006proto3", 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgBase.proto", &protobuf_RegisterTypes);
  MsgHeader::default_instance_ = new MsgHeader();
  ClientPacket::default_instance_ = new ClientPacket();
  MsgHeader::default_instance_->InitAsDefaultInstance();
  ClientPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgBase_2eproto {
  StaticDescriptorInitializer_msgBase_2eproto() {
    protobuf_AddDesc_msgBase_2eproto();
  }
} static_descriptor_initializer_msgBase_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHeader::kTimeFieldNumber;
const int MsgHeader::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHeader::MsgHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHeader)
}

void MsgHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHeader)
}

void MsgHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  userid_ = GOOGLE_LONGLONG(0);
}

MsgHeader::~MsgHeader() {
  // @@protoc_insertion_point(destructor:MsgHeader)
  SharedDtor();
}

void MsgHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeader_descriptor_;
}

const MsgHeader& MsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgBase_2eproto();
  return *default_instance_;
}

MsgHeader* MsgHeader::default_instance_ = NULL;

MsgHeader* MsgHeader::New(::google::protobuf::Arena* arena) const {
  MsgHeader* n = new MsgHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, userid_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional int64 userid = 4;
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHeader)
  return false;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHeader)
  // optional int64 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int64 userid = 4;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:MsgHeader)
}

::google::protobuf::uint8* MsgHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHeader)
  // optional int64 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int64 userid = 4;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MsgHeader)
  return target;
}

int MsgHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MsgHeader)
  int total_size = 0;

  // optional int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int64 userid = 4;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgHeader)
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void MsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {

  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHeader::InternalSwap(MsgHeader* other) {
  std::swap(time_, other->time_);
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeader_descriptor_;
  metadata.reflection = MsgHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHeader

// optional int64 time = 3;
void MsgHeader::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MsgHeader::time() const {
  // @@protoc_insertion_point(field_get:MsgHeader.time)
  return time_;
}
 void MsgHeader::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:MsgHeader.time)
}

// optional int64 userid = 4;
void MsgHeader::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MsgHeader::userid() const {
  // @@protoc_insertion_point(field_get:MsgHeader.userid)
  return userid_;
}
 void MsgHeader::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:MsgHeader.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientPacket::kHeaderFieldNumber;
const int ClientPacket::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientPacket::ClientPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientPacket)
}

void ClientPacket::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::MsgHeader*>(&::MsgHeader::default_instance());
}

ClientPacket::ClientPacket(const ClientPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientPacket)
}

void ClientPacket::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClientPacket::~ClientPacket() {
  // @@protoc_insertion_point(destructor:ClientPacket)
  SharedDtor();
}

void ClientPacket::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void ClientPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPacket_descriptor_;
}

const ClientPacket& ClientPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgBase_2eproto();
  return *default_instance_;
}

ClientPacket* ClientPacket::default_instance_ = NULL;

ClientPacket* ClientPacket::New(::google::protobuf::Arena* arena) const {
  ClientPacket* n = new ClientPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientPacket)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientPacket)
  return false;
#undef DO_
}

void ClientPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientPacket)
  // optional .MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bytes content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:ClientPacket)
}

::google::protobuf::uint8* ClientPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientPacket)
  // optional .MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional bytes content = 2;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ClientPacket)
  return target;
}

int ClientPacket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ClientPacket)
  int total_size = 0;

  // optional .MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientPacket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientPacket)
    MergeFrom(*source);
  }
}

void ClientPacket::MergeFrom(const ClientPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::MsgHeader::MergeFrom(from.header());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ClientPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientPacket::CopyFrom(const ClientPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPacket::IsInitialized() const {

  return true;
}

void ClientPacket::Swap(ClientPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientPacket::InternalSwap(ClientPacket* other) {
  std::swap(header_, other->header_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientPacket_descriptor_;
  metadata.reflection = ClientPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientPacket

// optional .MsgHeader header = 1;
bool ClientPacket::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void ClientPacket::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::MsgHeader& ClientPacket::header() const {
  // @@protoc_insertion_point(field_get:ClientPacket.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::MsgHeader* ClientPacket::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:ClientPacket.header)
  return header_;
}
::MsgHeader* ClientPacket::release_header() {
  // @@protoc_insertion_point(field_release:ClientPacket.header)
  
  ::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ClientPacket::set_allocated_header(::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.header)
}

// optional bytes content = 2;
void ClientPacket::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClientPacket::content() const {
  // @@protoc_insertion_point(field_get:ClientPacket.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientPacket::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientPacket.content)
}
 void ClientPacket::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientPacket.content)
}
 void ClientPacket::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientPacket.content)
}
 ::std::string* ClientPacket::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ClientPacket.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientPacket::release_content() {
  // @@protoc_insertion_point(field_release:ClientPacket.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientPacket::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ClientPacket.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
